##
## SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>
## SPDX-License-Identifier: LicenseRef-Splunk-8-2021
##
##

[infoblox:port]
TRANSFORMS-0_branch_source_type = infoblox_branch_source_type_1, infoblox_branch_source_type_2, infoblox_branch_source_type_3, infoblox_branch_source_type_4
SHOULD_LINEMERGE = false
DATETIME_CONFIG = NONE
TRUNCATE = 0
EVENT_BREAKER_ENABLE = true

[infoblox:file]
TRANSFORMS-0_branch_source_type = infoblox_branch_source_type_1, infoblox_branch_source_type_2, infoblox_branch_source_type_3, infoblox_branch_source_type_4
MAX_TIMESTAMP_LOOKAHEAD = 20
SHOULD_LINEMERGE = false
TRUNCATE = 0
EVENT_BREAKER_ENABLE = true

[infoblox:dhcp]
#Extracts
EXTRACT-dhcp_1  = [^\:]+\:\s*(?<dest_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\,\s*(?<state>[^\,]*)\,(?<dest_hostname>[^\,]*)\,\s*(?<dest_mac>[0-9a-zA-Z]{2}(?:\:[0-9a-zA-Z]{2}){5})\,\s*(?<start_time>\d*)\,\s*(?<end_time>\d*)\,
EXTRACT-dhcp_2  = Added\sreverse\smap\sfrom\s(?<reverse_ip_src>(?<reverse_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\S+)\s+to\s+(?<src_ip>\S+)
EXTRACT-dhcp_3  = Addition\sof\s(?<map_type>.+)\smap\sfor\s(?<dest_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\sdeferred
EXTRACT-dhcp_4  = (?<detail_fail_message>Unable\sto\sadd\s.+connection\srefused)
EXTRACT-dhcp_5  = from\s(?<src_ip>\S+)\sto\s(?<dest_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:\sconnection\srefused
EXTRACT-dhcp_6  = (?<fail_message>Server\srefused\supdate)\.\s(?<detail_fail_message>[^$]+)$
EXTRACT-dhcp_7  = server\s(?<dest_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\sfor\sprincipal\s(?<principal>\S+)[\.\s]
EXTRACT-dhcp_8  = (?<security_context_message>Security\scontext.+)\(good\sfor\s(?<good_duration>\d+)s\)
EXTRACT-dhcp_9  = BOOTREQUEST\sfrom\s(?<src_mac>[0-9a-zA-Z]{2}(?:\:[0-9a-zA-Z]{2}){5})\svia\s(?<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:\s(?<bootp_message>.+)$
EXTRACT-dhcp_10 = Removed\sforward\smap\sfrom\s(?<src_forward>\S+)\sto\s(?<dest_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
EXTRACT-dhcp_11 = Removed\sreverse\smap\son\s(?<reverse_ip_src>(?<reverse_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\S+)
EXTRACT-dhcp_12 = bind\supdate\son\s(?<dest_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\sfrom\s(?<src_ip>\S+)\srejected\:\s(?<reject_reason>.+)
EXTRACT-dhcp_13 = dhcpd\[\d+\]\:\s(?<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:\sremoving\sclient\sassociation

#Reports
REPORT-dhcp_types   = infoblox_dhcp_extract_field_0, infoblox_dhcp_extract_field_1, infoblox_dhcp_extract_field_2, infoblox_dhcp_extract_field_3, infoblox_dhcp_extract_field_4, infoblox_dhcp_extract_field_5, infoblox_dhcp_extract_field_6, infoblox_dhcp_extract_field_7, infoblox_dhcp_extract_field_8, infoblox_dhcp_extract_field_12, infoblox_dhcp_DHCPEXPIRE_0
REPORT-dhcp_extras  = infoblox_dhcp_extract_field_9, infoblox_dhcp_extract_field_10
REPORT-dhcp_blocked = infoblox_dhcp_extract_field_11

#Field Aliases
FIELDALIAS-dest_hostname-as-dest_nt_host  = dest_hostname AS dest_nt_host
FIELDALIAS-dhcp_type-as-signature         = dhcp_type AS signature

#Evals
EVAL-infoblox_host = coalesce(infoblox_host, host)
EVAL-infoblox_ip = if(match(coalesce(infoblox_host, host), "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"), coalesce(infoblox_host, host), null)
EVAL-dest               = coalesce(dest_ip,lease_ip)
EVAL-vendor_product     = "Infoblox NIOS"
EVAL-action             = if(in(lower(action_blocked),"dhcprelease", "refused","invalid","ignored","rejected","dhcpdecline","dhcpnak","removed","removing"), "blocked", "added")

[infoblox:dns]
#Reports
REPORT-dns_0 = infoblox_dns_extract_field_0
REPORT-dns_extract   = dns_request, dns_query_denied, dns_query_failed, dns_request_src, dns_request_record_type
REPORT-dns_extract_2 = dns_response,dns_incepted,dns_records_extract, dns_response_src, dns_response_record_type
REPORT-dns_rpz_extract = dns_rpz_cef_0
REPORT-dns_fields_1  = infoblox_dns_extract_field_1, infoblox_dns_extract_field_2, infoblox_dns_extract_field_3, infoblox_dns_extract_field_4, infoblox_dns_extract_field_5, infoblox_dns_extract_field_6, infoblox_dns_extract_field_80, infoblox_dns_extract_field_81, infoblox_dns_extract_field_82, infoblox_dns_extract_field_9, infoblox_dns_extract_field_10
REPORT-dns_fields_2  = infoblox_dns_extract_field_11, infoblox_dns_extract_field_12, infoblox_dns_extract_field_13, infoblox_dns_extract_field_14, infoblox_dns_extract_field_15, infoblox_dns_extract_field_16, infoblox_dns_extract_field_17
REPORT-dns_rpz_fields_1 = infoblox_dns_rpz_qname_fields



#Field Aliases
FIELDALIAS-answer       = dns_rdata AS answer
FIELDALIAS-body         = msg AS body
FIELDALIAS-severity_id  = dns_rpz_severity_id AS severity_id
FIELDALIAS-name         = dns_rpz_type AS name
FIELDALIAS-infoblox_host = host ASNEW infoblox_host
FIELDALIAS-ttl = dns_answer_ttl as ttl

#Evals
EVAL-message_type = CASE(message_type=="response", "Response", message_type=="query", "Query", true(), message_type)
EVAL-infoblox_ip = if(match(infoblox_host, "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"), infoblox_host, null)
EVAL-answer_count   = CASE(lower(message_type)=="response" AND isnotnull(dns_record), mvcount(dns_record), lower(message_type)=="response", 0, true(), null)
EVAL-vendor_product = "Infoblox NIOS"
EVAL-dvc            = if(is_updating == "updating", infoblox_host, null)
EVAL-status         = if(is_updating == "updating", "success", null)
EVAL-object_id      = object + " at " + record
EVAL-change_type    = if(is_updating == "updating", "dns zone setting", null)
EVAL-action         = CASE(the_action == "adding", "created", the_action == "deleting", "deleted")
EVAL-dest           = CASE(isnotnull(dst), dst , isnotnull(dns_request_name_serverIP), dns_request_name_serverIP, lower(message_type)=="response" OR command == "dhcp_updater_default" OR match(named_message, "query.*(denied|failed)"), infoblox_host, isnotnull(dest), dest, isnotnull(dest_ip), dest_ip)
EVAL-dest_ip        = CASE(isnotnull(dst), dst , isnotnull(dns_request_name_serverIP), dns_request_name_serverIP, (lower(message_type)=="response" OR command=="dhcp_updater_default") AND match(infoblox_host, "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"), infoblox_host, isnotnull(dest_ip), dest_ip)
EVAL-query          = if(isnotnull(query), query, if(match(lower(message_type),"response"), coalesce(dns_response_queried_domain,dns_rpz_query), if(match(lower(message_type),"query") and isnotnull(dns_request_queried_domain),dns_request_queried_domain,if(match(error_query,".*"),error_query,if(isnotnull(dns_rpz_query),dns_rpz_query,cache_query)))))
EVAL-query_count    = 1
EVAL-src	        = coalesce(src_req,src_resp,src_ip,src)
EVAL-record_type    = if(upper(dns_rpz_policy_action)=="NXDOMAIN", null, coalesce(dns_type, record_type_req,record_type_resp,record_type_update,the_query_type, dns_rpz_record_type, record_type))
EVAL-object_category    = coalesce(record_type_req,record_type_resp,record_type_update,the_query_type)
EVAL-the_query_type = coalesce(qtype, the_query_type)
EVAL-type = coalesce(qtype, the_query_type)
EVAL-query_type = coalesce(dns_request_type_name, qtype, dns_response_type_name, dns_type, if(record_type=="SOA", "Query", record_type))
EVAL-dest_resp = infoblox_host
EVAL-transport = coalesce(lower(dns_response_protocol), "udp")
EVAL-src_port = coalesce(dns_request_client_port, dns_response_client_port, spt, src_port)
EVAL-dns_response_rcode = case(isnotnull(dns_response_rcode), dns_response_rcode, IN(upper(dns_rpz_policy_action), "PASSTHRU", "CNAME"), "NoError", match(named_message, "DNS format error"), "FormErr", true(), dns_rpz_policy_action)
# We don't have authority_answer_count and additional_answer_count field in the event.
EVAL-authority_answer_count = 0
EVAL-additional_answer_count = 0

#Lookups
LOOKUP-20_look_up_extract   = infoblox_dns_query_type_lookup the_query_type OUTPUTNEW query_type
LOOKUP-dns_reply_code       = infoblox_dns_reply_code_id_lookup dns_response_rcode OUTPUT reply_code_id dns_response_rcode AS reply_code
LOOKUP-dns_severity         = infoblox_severity_lookup severity_id OUTPUT severity

[infoblox:threatprotect]
#Reports
REPORT-threatprotect-extract 	= infoblox_threatprotect_field_0, infoblox_threatprotect_field_1, infoblox_threatprotect_field_2

#Field Aliases
FIELDALIAS-src_ip			= src as src_ip
FIELDALIAS-src_port 		= spt as src_port
FIELDALIAS-dest_ip         	= dst as dest_ip
FIELDALIAS-dest_port 		= dpt as dest_port
FIELDALIAS-category 		= cat as rule_category, cat as category
FIELDALIAS-dest				= dst as dest
FIELDALIAS-signature        = rule_name as signature

#Evals
EVAL-dvc = coalesce(infoblox_host, host)
EVAL-infoblox_host = coalesce(infoblox_host, host)
EVAL-infoblox_ip = if(match(coalesce(infoblox_host, host), "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"), coalesce(infoblox_host, host), null)
EVAL-action = case(act=="DROP", "blocked" , act=="PASS" OR act=="ALERT", "allowed", true(), "unknown")
EVAL-ids_type = "network"
EVAL-transport = "udp"
EVAL-vendor_product = "Infoblox NIOS"

LOOKUP-threatprotect-severity = infoblox_severity_lookup severity_id OUTPUT vendor_severity severity

[infoblox:audit]
#Extracts
EXTRACT-audit_0             = \d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}\.\d+Z\s+\[[^\]]+\]:\s(?<infoblox_action>rebooted)\sthe\ssystem
EXTRACT-audit_1             = \d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}\.\d+Z\s+\[[^\]]+\]:\s(Created|Modified|Deleted)\sGridDhcp\s[^:+|^\s]+[:]*\s+[^\[]+\[(?<object>[^:]+)
EXTRACT-audit_2             = \d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}\.\d+Z\s+\[[^\]]+\]:\sModified\s(MemberDhcp|MemberAtp)\s[^:+|^\s]+[:]*\s+.*enable[^:]+:[^>]+>(?<enabled>[^\s]+)

#Reports
REPORT-audit_fields         = infoblox_audit_extract_field_0, infoblox_audit_extract_field_1, infoblox_audit_extract_action_unlocked, infoblox_audit_extract_field_2

#Evals
EVAL-object_name            = if(IN(object_name, "", "-"), null, object_name)
EVAL-object_type            = if(IN(object_type, "", "-"), null, if(lower(message) == "rebooted the system", "system", object_type))
EVAL-action                 = case(infoblox_action=="Login_Allowed" OR infoblox_action=="First_Login","success",infoblox_action=="Login_Denied","failure",infoblox_action=="Logout","logoff",((object_type=="MemberDhcp" OR object_type=="MemberAtp") AND enabled=="False"),"stopped",infoblox_action=="rebooted","restarted",((object_type=="MemberDhcp" OR object_type=="MemberAtp") AND enabled=="True"),"started",infoblox_action=="Deleted","deleted",infoblox_action=="Modified","modified",infoblox_action=="Created","created",1==1,infoblox_action)
EVAL-authentication_method  = case(infoblox_action=="Login_Allowed" OR infoblox_action=="First_Login" OR infoblox_action=="Login_Denied",apparently_via)
EVAL-app                    = case(infoblox_action=="Login_Allowed" OR infoblox_action=="First_Login" OR infoblox_action=="Login_Denied","Infoblox NIOS")
EVAL-src                    = case(infoblox_action=="Login_Allowed" OR infoblox_action=="First_Login" OR infoblox_action=="Login_Denied" OR infoblox_action=="Logout",ip)
EVAL-src_ip                 = case(infoblox_action=="Login_Allowed" OR infoblox_action=="First_Login" OR infoblox_action=="Login_Denied" OR infoblox_action=="Logout",ip)
EVAL-src_user               = case(object_type=="AdminMember" OR infoblox_action=="unlocked" OR infoblox_action=="Logout",admin)
EVAL-src_user_name          = case(object_type=="AdminMember" OR infoblox_action=="unlocked",admin)
EVAL-src_user_type          = case(object_type=="AdminMember" OR infoblox_action=="unlocked",admin)
EVAL-user                   = case(object_type=="AdminMember",object_name,1==1,admin)
EVAL-user_name              = case(object_type=="AdminMember",object_name,1==1,admin)
EVAL-authentication_service = case(infoblox_action=="Login_Allowed" OR infoblox_action=="First_Login" OR infoblox_action=="Login_Denied",coalesce(auth,info))
EVAL-user_role              = case(infoblox_action=="Login_Allowed" OR infoblox_action=="First_Login" OR infoblox_action=="Login_Denied","admin")
EVAL-user_type              = "admin"
EVAL-vendor_product         = "Infoblox NIOS"
EVAL-status                 = case(infoblox_action=="Logout" OR infoblox_action=="rebooted" OR infoblox_action=="unlocked" OR object_type=="AuthZone" OR object_type=="AdminMember" OR object_type=="AdminGroup" OR object_type=="MemberAtp" OR object_type=="MemberDhcp" OR object_type=="DhcpRange" OR object_type=="GridDhcp" OR object_type=="ResponsePolicyCnameRecord" OR object_type=="Network" OR object_type=="DnsView" OR object_type=="AtpProfile" OR object_type=="NsGroup" OR object_type=="ARecord" OR object_type=="ResponsePolicyZone" OR object_type=="DelegatedZone" OR object_type=="AtpRule" OR object_type="DhcpRangeTemplate" OR object_type=="ResponsePolicyAaaaRecord" OR object_type=="ResponsePolicyARecord" OR object_type=="SharedARecord" OR object_type=="SharedRecordGroup" OR object_type=="SRGZone" OR object_type=="NetworkTemplate" OR object_type=="FixedAddressTemplate" OR object_type=="FixedAddress" OR object_type=="CnameRecord" OR object_type=="AaaaRecord" OR object_type=="PtrRecord" OR object_type=="ResponsePolicyIPAddress" OR object_type=="ReservedRange" OR object_type=="IPv6OptionFilter","success")
EVAL-object                 = case(infoblox_action=="Logout" OR infoblox_action=="unlocked",admin,infoblox_action=="rebooted","Infoblox system",object_type=="MemberAtp","threat_protection",object_type=="MemberDhcp","dhcp",object_type=="GridDhcp",coalesce(object,object_name),object_name!="-",object_name)
EVAL-object_attrs           = case(infoblox_action=="Logout",group,infoblox_action=="unlocked","account",infoblox_action=="rebooted","OS",object_type=="MemberAtp","service",object_type=="MemberDhcp","dhcp",object_type!="-",object_type)
EVAL-object_category        = case(infoblox_action=="Logout" OR infoblox_action=="unlocked" OR object_type=="AdminMember","user",object_type=="AdminGroup","group",infoblox_action=="rebooted","OS",object_type=="DhcpRange" OR object_type=="GridDhcp" OR object_type="DhcpRangeTemplate","dhcp",object_type=="ResponsePolicyCnameRecord" OR object_type=="DnsView" OR object_type=="NsGroup" OR object_type=="ARecord" OR object_type=="ResponsePolicyZone" OR object_type=="ResponsePolicyAaaaRecord" OR object_type=="ResponsePolicyARecord" OR object_type=="IPv6OptionFilter" OR object_type=="ReservedRange" OR object_type=="CnameRecord" OR object_type=="SharedARecord" OR object_type=="SharedRecordGroup" OR object_type=="ResponsePolicyIPAddress" OR object_type=="AaaaRecord" OR object_type=="PtrRecord","dns",object_type=="MemberDhcp","service",object_type=="AtpProfile","threat_protection",object_type!="-",object_type)
EVAL-change_type            = case(infoblox_action=="Logout" OR infoblox_action=="unlocked" OR object_type=="AdminMember" OR object_type=="AdminGroup","AAA",infoblox_action=="rebooted" OR object_type=="MemberAtp" OR object_type=="MemberDhcp","system",object_type=="DhcpRange" OR object_type=="GridDhcp" OR object_type=="ResponsePolicyCnameRecord" OR object_type=="Network" OR object_type=="AuthZone" OR object_type=="DnsView" OR object_type=="AtpProfile" OR object_type=="AtpRule" OR object_type=="NsGroup" OR object_type=="ARecord" OR object_type=="ResponsePolicyZone" OR object_type="DhcpRangeTemplate" OR object_type=="ResponsePolicyAaaaRecord" OR object_type=="ResponsePolicyARecord" OR object_type=="SharedARecord" OR object_type=="SharedRecordGroup" OR object_type=="SRGZone" OR object_type=="NetworkTemplate" OR object_type=="FixedAddressTemplate" OR object_type=="FixedAddress" OR object_type=="DelegatedZone" OR object_type=="CnameRecord" OR object_type=="AaaaRecord" OR object_type=="PtrRecord" OR object_type=="ResponsePolicyIPAddress" OR object_type=="ReservedRange" OR object_type=="IPv6OptionFilter","network")
EVAL-command                = case(infoblox_action=="Logout" OR infoblox_action=="unlocked" OR object_type=="AuthZone" OR object_type=="AdminMember" OR object_type=="AdminGroup" OR infoblox_action=="rebooted" OR object_type=="MemberAtp" OR object_type=="MemberDhcp" OR object_type=="DhcpRange" OR object_type=="GridDhcp" OR object_type=="ResponsePolicyCnameRecord" OR object_type=="Network" OR object_type=="DnsView" OR object_type=="AtpProfile" OR object_type=="NsGroup" OR object_type=="ARecord" OR object_type=="ResponsePolicyZone" OR object_type=="DelegatedZone" OR object_type=="AtpRule" OR object_type="DhcpRangeTemplate" OR object_type=="ResponsePolicyAaaaRecord" OR object_type=="ResponsePolicyARecord" OR object_type=="SharedARecord" OR object_type=="SharedRecordGroup" OR object_type=="SRGZone" OR object_type=="NetworkTemplate" OR object_type=="FixedAddressTemplate" OR object_type=="FixedAddress" OR object_type=="DelegatedZone" OR object_type=="CnameRecord" OR object_type=="AaaaRecord" OR object_type=="PtrRecord" OR object_type=="ResponsePolicyIPAddress" OR object_type=="ReservedRange" OR object_type=="IPv6OptionFilter", case(request_type!="null","Web API",1==1,"Web"))
EVAL-dest_ip                = if(match(host,"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"),host,null)

#Field Aliases
FIELDALIAS-dest             = host as dest
FIELDALIAS-dvc              = host as dvc
